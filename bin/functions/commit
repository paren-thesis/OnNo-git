#!/bin/bash

source /c/OnNo-git/bin/functions/utils/utils


# Commit with a message
commit_with_message() {
    git_status
    read -p "${GG}Enter the commit message: ${BB}" message
    if ! validate_input "$message" "Commit message cannot be empty"; then
        return 1
    fi
    if ! safe_git_exec commit -m "$message"; then
        return 1
    fi
    show_success "Changes have been committed with the message: '$message'"
}

# Amend the last commit
amend_last_commit() {
    git_status
    read -p "${GG}Are you sure you want to amend the last commit? (y/n): ${BB}" confirm
    if [[ $confirm == "y" || $confirm == "Y" ]]; then
        if ! safe_git_exec commit --amend; then
            return 1
        fi
        show_success "The last commit has been amended"
    else
        show_warning "Amend operation canceled"
    fi
}

# Commit specific files
commit_specific_files() {
    git_status
    read -p "${GG}Enter the file name(s) to commit (space-separated): ${BB}" files
    read -p "${GG}Enter the commit message: ${BB}" message

    if ! validate_input "$files" "File(s) cannot be empty" || ! validate_input "$message" "Commit message cannot be empty"; then
        return 1
    fi

    # Split files into an array
    IFS=' ' read -r -a files_array <<< "$files"

    # Check if files exist and are tracked by Git
    for file in "${files_array[@]}"; do
        if ! is_file_tracked "$file"; then
            return 1
        fi
    done

    # Stage and commit the files
    if ! safe_git_exec add "${files_array[@]}" || ! safe_git_exec commit -m "$message"; then
        return 1
    fi
    show_success "File(s) '${files_array[*]}' have been committed with the message: '$message'"
}

# Skip staging and commit directly
skip_staging_and_commit() {
    git_status
    read -p "${GG}Enter the commit message: ${BB}" message
    if ! validate_input "$message" "Commit message cannot be empty"; then
        return 1
    fi
    if ! safe_git_exec commit -a -m "$message"; then
        return 1
    fi
    show_success "Changes have been committed directly with the message: '$message'"
}

commit_and_sign() {
    git_status
    read -p "${GG}Enter the commit message: ${BB}" message
    if ! validate_input "$message" "Commit message cannot be empty"; then
        return 1
    fi
    if ! safe_git_exec commit -S -m "$message"; then
        return 1
    fi
    show_success "Changes have been committed and signed with the message: '$message'"
}

commit_all_changes() {
    git_status
    read -p "${GG}Enter the commit message: ${BB}" message
    if ! validate_input "$message" "Commit message cannot be empty"; then
        return 1
    fi
    if ! safe_git_exec add -A || ! safe_git_exec commit -m "$message"; then
        return 1
    fi
    show_success "All changes have been committed with the message: '$message'"
}

empty_commit() {
    read -p "${GG}Enter the commit message: ${BB}" message
    if ! validate_input "$message" "Commit message cannot be empty"; then
        return 1
    fi
    if ! safe_git_exec commit --allow-empty -m "$message"; then
        return 1
    fi
    show_success "Empty commit created with the message: '$message'"
}

commit_with_date() {
    git_status
    read -p "${GG}Enter the commit message: ${BB}" message
    read -p "${GG}Enter the date (YYYY-MM-DD HH:MM:SS): ${BB}" date
    if ! validate_input "$message" "Commit message cannot be empty" || ! validate_input "$date" "Date cannot be empty"; then
        return 1
    fi
    if ! safe_git_exec commit -m "$message" --date="$date"; then
        return 1
    fi
    show_success "Changes have been committed with the message: '$message' and date: '$date'"
}

view_commit_history() {
    echo -e "${CY}Commit history:${RT}"
    safe_git_exec log --oneline
    echo -e "${GG}Press [Enter] to continue...${RT}"
    read
}

undo_last_commit() {
    read -p "${GG}Are you sure you want to undo the last commit? (y/n): ${BB}" confirm
    if [[ $confirm == "y" || $confirm == "Y" ]]; then
        if ! safe_git_exec reset --soft HEAD~1; then
            return 1
        fi
        show_success "Last commit has been undone. Changes are preserved in the working directory"
    else
        show_warning "Undo operation canceled"
    fi
}