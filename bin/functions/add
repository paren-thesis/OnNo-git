#!/bin/bash

source /c/OnNo-git/bin/functions/utils/utils

# Function to show available add options
show_add_options() {
    echo -e "${CY}Available Add Options:${RT}"
    echo -e "${BB}1.${RT} Dry Run (simulate add without actually adding)"
    echo -e "${BB}2.${RT} Verbose Mode (show detailed output)"
    echo -e "${BB}3.${RT} Interactive Mode (selectively stage changes)"
    echo -e "${BB}4.${RT} Patch Mode (select hunks to stage)"
    echo -e "${BB}5.${RT} Force Add (add ignored files)"
    echo -e "${BB}6.${RT} Update Mode (only update tracked files)"
    echo -e "${BB}7.${RT} Add All (stage all changes)"
    echo -e "${BB}8.${RT} Add Specific Files"
    echo -e "${BB}9.${RT} Add with Executable Permission"
    echo -e "${BB}10.${RT} Add from File List"
}

# Function to add files with dry run
add_dry_run() {
    echo -e "${CY}Simulating git add operation:${RT}"
    git add -n .
    if [ $? -eq 0 ]; then
        echo -e "${GG}Dry run completed successfully${RT}"
    else
        echo -e "${RE}Dry run failed${RT}"
    fi
}

# Function to add files in verbose mode
add_verbose() {
    echo -e "${CY}Adding files in verbose mode:${RT}"
    git add -v .
    if [ $? -eq 0 ]; then
        echo -e "${GG}Files added successfully${RT}"
    else
        echo -e "${RE}Failed to add files${RT}"
    fi
}

# Function to add files interactively
add_interactive() {
    echo -e "${CY}Starting interactive add mode:${RT}"
    git add -i
    if [ $? -eq 0 ]; then
        echo -e "${GG}Interactive add completed${RT}"
    else
        echo -e "${RE}Interactive add failed${RT}"
    fi
}

# Function to add files in patch mode
add_patch() {
    echo -e "${CY}Starting patch mode:${RT}"
    git add -p
    if [ $? -eq 0 ]; then
        echo -e "${GG}Patch mode completed${RT}"
    else
        echo -e "${RE}Patch mode failed${RT}"
    fi
}

# Function to force add files
add_force() {
    echo -e "${CY}Force adding files:${RT}"
    git add -f .
    if [ $? -eq 0 ]; then
        echo -e "${GG}Files force added successfully${RT}"
    else
        echo -e "${RE}Failed to force add files${RT}"
    fi
}

# Function to update tracked files
add_update() {
    echo -e "${CY}Updating tracked files:${RT}"
    git add -u
    if [ $? -eq 0 ]; then
        echo -e "${GG}Tracked files updated successfully${RT}"
    else
        echo -e "${RE}Failed to update tracked files${RT}"
    fi
}

# Function to add all files
add_all() {
    echo -e "${CY}Adding all files:${RT}"
    git add -A
    if [ $? -eq 0 ]; then
        echo -e "${GG}All files added successfully${RT}"
    else
        echo -e "${RE}Failed to add all files${RT}"
    fi
}

# Function to add specific files
add_specific_files() {
    echo -e "${CY}Enter file paths (space-separated):${RT}"
    read -p "${BB}> ${RT}" files
    
    if [ -z "$files" ]; then
        echo -e "${RE}No files specified${RT}"
        return 1
    fi
    
    git add $files
    if [ $? -eq 0 ]; then
        echo -e "${GG}Files added successfully${RT}"
    else
        echo -e "${RE}Failed to add files${RT}"
    fi
}

# Function to add files with executable permission
add_executable() {
    echo -e "${CY}Enter file paths to make executable (space-separated):${RT}"
    read -p "${BB}> ${RT}" files
    
    if [ -z "$files" ]; then
        echo -e "${RE}No files specified${RT}"
        return 1
    fi
    
    git add --chmod=+x $files
    if [ $? -eq 0 ]; then
        echo -e "${GG}Files added with executable permission${RT}"
    else
        echo -e "${RE}Failed to add files${RT}"
    fi
}

# Function to add files from a list
add_from_file() {
    echo -e "${CY}Enter path to file containing list of files to add:${RT}"
    read -p "${BB}> ${RT}" list_file
    
    if [ ! -f "$list_file" ]; then
        echo -e "${RE}File not found: $list_file${RT}"
        return 1
    fi
    
    git add --pathspec-from-file="$list_file"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Files added successfully from list${RT}"
    else
        echo -e "${RE}Failed to add files from list${RT}"
    fi
}

# Main function to handle add operations
git_add() {
    check_git_repo || return 1
    
    while true; do
        show_add_options
        echo -e "${BB}Enter option number (or 'q' to quit):${RT}"
        read -p "${BB}> ${RT}" choice
        
        case $choice in
            1) add_dry_run ;;
            2) add_verbose ;;
            3) add_interactive ;;
            4) add_patch ;;
            5) add_force ;;
            6) add_update ;;
            7) add_all ;;
            8) add_specific_files ;;
            9) add_executable ;;
            10) add_from_file ;;
            q|Q) echo -e "${GG}Exiting...${RT}"; break ;;
            *) echo -e "${RE}Invalid option${RT}" ;;
        esac
        
        echo
        read -p "${BB}Press Enter to continue...${RT}"
        clear
    done
}
