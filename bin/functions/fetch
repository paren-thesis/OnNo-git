#!/bin/bash

source /c/OnNo-git/bin/functions/utils/utils

# Function to perform basic fetch operations
basic_fetch() {
    git_status
    echo -e "${CY}Basic Fetch Options:${RT}"
    echo -e "${BB}1.${RT} Fetch from origin"
    echo -e "${BB}2.${RT} Fetch from all remotes"
    echo -e "${BB}3.${RT} Fetch from specific remote"
    read -p "${GG}Select option: ${BB}" option

    local fetch_opts=""
    case $option in
        1)
            safe_git_exec fetch origin
            ;;
        2)
            safe_git_exec fetch --all
            ;;
        3)
            read -p "${GG}Enter remote name: ${BB}" remote
            safe_git_exec fetch "$remote"
            ;;
        *)
            echo -e "${RE}Invalid option${RT}"
            return 1
            ;;
    esac
}

# Function to handle fetch with tags
fetch_with_tags() {
    git_status
    echo -e "${CY}Tag Options:${RT}"
    echo -e "${BB}1.${RT} Fetch all tags"
    echo -e "${BB}2.${RT} Fetch without tags"
    echo -e "${BB}3.${RT} Prune tags"
    read -p "${GG}Select option: ${BB}" option

    local tag_opts=""
    case $option in
        1) tag_opts="--tags" ;;
        2) tag_opts="--no-tags" ;;
        3) tag_opts="--prune-tags" ;;
    esac

    safe_git_exec fetch $tag_opts
}

# Function to handle fetch with pruning
fetch_with_pruning() {
    git_status
    echo -e "${CY}Pruning Options:${RT}"
    echo -e "${BB}1.${RT} Prune remote branches"
    echo -e "${BB}2.${RT} Prune tags"
    echo -e "${BB}3.${RT} Both"
    read -p "${GG}Select option: ${BB}" option

    local prune_opts=""
    case $option in
        1) prune_opts="--prune" ;;
        2) prune_opts="--prune-tags" ;;
        3) prune_opts="--prune --prune-tags" ;;
    esac

    safe_git_exec fetch $prune_opts
}

# Function to handle fetch with submodules
fetch_with_submodules() {
    git_status
    echo -e "${CY}Submodule Options:${RT}"
    echo -e "${BB}1.${RT} Fetch submodules"
    echo -e "${BB}2.${RT} Fetch submodules in parallel"
    echo -e "${BB}3.${RT} Fetch submodules on demand"
    read -p "${GG}Select option: ${BB}" option

    local submodule_opts=""
    case $option in
        1)
            submodule_opts="--recurse-submodules"
            ;;
        2)
            read -p "${GG}Enter number of parallel jobs: ${BB}" jobs
            submodule_opts="--recurse-submodules -j$jobs"
            ;;
        3)
            submodule_opts="--recurse-submodules=on-demand"
            ;;
    esac

    safe_git_exec fetch $submodule_opts
}

# Function to handle fetch with depth options
fetch_with_depth() {
    git_status
    echo -e "${CY}Depth Options:${RT}"
    echo -e "${BB}1.${RT} Set depth"
    echo -e "${BB}2.${RT} Deepen history"
    echo -e "${BB}3.${RT} Deepen since time"
    echo -e "${BB}4.${RT} Deepen excluding ref"
    read -p "${GG}Select option: ${BB}" option

    local depth_opts=""
    case $option in
        1)
            read -p "${GG}Enter depth: ${BB}" depth
            depth_opts="--depth=$depth"
            ;;
        2)
            read -p "${GG}Enter deepen amount: ${BB}" deepen
            depth_opts="--deepen=$deepen"
            ;;
        3)
            read -p "${GG}Enter time (YYYY-MM-DD): ${BB}" time
            depth_opts="--shallow-since=$time"
            ;;
        4)
            read -p "${GG}Enter ref to exclude: ${BB}" ref
            depth_opts="--shallow-exclude=$ref"
            ;;
    esac

    safe_git_exec fetch $depth_opts
}

# Function to handle fetch with advanced options
fetch_with_advanced() {
    git_status
    echo -e "${CY}Advanced Options:${RT}"
    echo -e "${BB}1.${RT} Force fetch"
    echo -e "${BB}2.${RT} Dry run"
    echo -e "${BB}3.${RT} Atomic transaction"
    echo -e "${BB}4.${RT} Append to FETCH_HEAD"
    echo -e "${BB}5.${RT} Set upstream"
    read -p "${GG}Select option: ${BB}" option

    local advanced_opts=""
    case $option in
        1) advanced_opts="--force" ;;
        2) advanced_opts="--dry-run" ;;
        3) advanced_opts="--atomic" ;;
        4) advanced_opts="--append" ;;
        5) advanced_opts="--set-upstream" ;;
    esac

    safe_git_exec fetch $advanced_opts
}

# Function to handle fetch with network options
fetch_with_network() {
    git_status
    echo -e "${CY}Network Options:${RT}"
    echo -e "${BB}1.${RT} IPv4 only"
    echo -e "${BB}2.${RT} IPv6 only"
    echo -e "${BB}3.${RT} Custom upload pack"
    read -p "${GG}Select option: ${BB}" option

    local network_opts=""
    case $option in
        1) network_opts="-4" ;;
        2) network_opts="-6" ;;
        3)
            read -p "${GG}Enter upload pack path: ${BB}" path
            network_opts="--upload-pack=$path"
            ;;
    esac

    safe_git_exec fetch $network_opts
}

# Function to handle fetch with maintenance options
fetch_with_maintenance() {
    git_status
    echo -e "${CY}Maintenance Options:${RT}"
    echo -e "${BB}1.${RT} Auto maintenance"
    echo -e "${BB}2.${RT} Auto GC"
    echo -e "${BB}3.${RT} Write commit graph"
    read -p "${GG}Select option: ${BB}" option

    local maintenance_opts=""
    case $option in
        1) maintenance_opts="--auto-maintenance" ;;
        2) maintenance_opts="--auto-gc" ;;
        3) maintenance_opts="--write-commit-graph" ;;
    esac

    safe_git_exec fetch $maintenance_opts
}

# Main function to handle fetch operations
git_fetch() {
    echo -e "${CY}Git Fetch Utility${RT}"
    echo -e "${BB}1.${RT} Basic fetch"
    echo -e "${BB}2.${RT} Fetch with tags"
    echo -e "${BB}3.${RT} Fetch with pruning"
    echo -e "${BB}4.${RT} Fetch with submodules"
    echo -e "${BB}5.${RT} Fetch with depth"
    echo -e "${BB}6.${RT} Fetch with advanced options"
    echo -e "${BB}7.${RT} Fetch with network options"
    echo -e "${BB}8.${RT} Fetch with maintenance"
    read -p "${GG}Select operation: ${BB}" operation

    case $operation in
        1) basic_fetch ;;
        2) fetch_with_tags ;;
        3) fetch_with_pruning ;;
        4) fetch_with_submodules ;;
        5) fetch_with_depth ;;
        6) fetch_with_advanced ;;
        7) fetch_with_network ;;
        8) fetch_with_maintenance ;;
        *)
            echo -e "${RE}Invalid operation${RT}"
            return 1
            ;;
    esac
}

